//The first few functions deal wiht the visual aspects of the site - both what tabs are visible
//and the styling of the output text. 
function toggleNavBar() {
    var panel = document.getElementById("panel");
    if (panel.style.display === "block") {
        panel.style.display = "none";
    } else {
        panel.style.display = "block";
    }
}

function openTab(evt, tabName) {
    var i, tabcontent, tablinks;
    if (tabName != "Swap Words") {
        document.getElementById("editor-word").innerHTML = "";
        makeTextNodeHelperFunction("Click a word to begin editing", "editor-word");
        document.getElementById("radio-button-space").innerHTML = "";
        var words = document.getElementsByClassName("word");
        for (var i = 0; i < words.length; i++){
            words[i].style.backgroundColor = "transparent";
        }
    }
    tabcontent = document.getElementsByClassName("tabcontent");
    for (i = 0; i < tabcontent.length; i++) {
        tabcontent[i].style.display = "none";
    }

    tablinks =document.getElementsByClassName("tablinks");
    for (i = 0; i < tablinks.length; i++) {
        tablinks[i].className = tablinks[i].className.replace(" active", "");
    }

    document.getElementById(tabName).style.display = "block";
    evt.currentTarget.className += " active";
}

function openViewTab(evt, viewtabName) {
    var i, viewtabcontent, viewtablinks;

    viewtabcontent = document.getElementsByClassName("viewtabcontent");
    for (i = 0; i < viewtabcontent.length; i++) {
        viewtabcontent[i].style.display = "none";
    }

    viewtablinks =document.getElementsByClassName("viewtablinks");
    for (i = 0; i < viewtablinks.length; i++) {
        viewtablinks[i].className = viewtablinks[i].className.replace(" active", "");
    }

    document.getElementById(viewtabName).style.display = "block";
    evt.currentTarget.className += " active";
}


//This function returns the text to its normal state - it's called at the start of the other display methods so only one can
//be applied at any time. 
function displayNormalText() {
    var stressContent = document.getElementsByClassName("stress");
    for (var i = 0; i < stressContent.length; i++) {
        stressContent[i].style.color = "black";
        stressContent[i].style.fontWeight = "normal";
    }
    var unstressContent = document.getElementsByClassName("unstressed");
    for (var i = 0; i < unstressContent.length; i++) {
        unstressContent[i].style.color = "black";
        unstressContent[i].style.fontWeight = "normal";

    }
    var unknownWords = document.getElementsByClassName("unknown");
    for (var i = 0; i < unknownWords.length; i++) {
        unknownWords[i].style.color = "black";
        unknownWords[i].style.fontWeight = "normal";

    }

}

//This function changes font colour based on stress based on the html tags generated by the Words.py file for each word. 
function displayColours() {
    displayNormalText();
    var stressContent = document.getElementsByClassName("stress");
    for (var i = 0; i < stressContent.length; i++) {
        stressContent[i].style.color = "red";

    }
    var unstressContent = document.getElementsByClassName("unstressed");
    for (var i = 0; i < unstressContent.length; i++) {
        unstressContent[i].style.color = "blue";

    }
    var unknownWords = document.getElementsByClassName("unknown");
    for (var i = 0; i < unknownWords.length; i++) {
        unknownWords[i].style.color = "purple";
    }
}
//This does the same as the Colours function, but uses bold text to highlight the stresses syllables. 
function boldSylls() {
    displayNormalText();
    var stressed = document.getElementsByClassName("stress");
    for (var i = 0; i < stressed.length; i++) {
        stressed[i].style.fontWeight = "bold";
    }
}

//This function highlights text based on their word class - again using the html tags generated by Words.py.
function highlight(inputString, highlightColour, evt) {
    var box = evt.currentTarget;
    if (box.checked == true) {
        var wordType = document.getElementsByClassName(inputString);
        for (var i = 0; i < wordType.length; i++) {
            wordType[i].style.backgroundColor = highlightColour;
        }
    } else {
        var wordType = document.getElementsByClassName(inputString);
        for (var i = 0; i < wordType.length; i++) {
            wordType[i].style.backgroundColor = "transparent";
        }
    }

}
//This simply allows a user to shide or show Scansion's analysis of each line's meter. 
function toggleDetails() {
    var info = document.getElementById("detailsInfo");
    if (info.style.display === "none") {
        info.style.display = "block";
    } else {
        info.style.display = "none";
    }
}

//The user can seek a definition for a word or highlight it to use the editing functions. This function determines which will be performed
//based on which tab is open, after separating the html id tag to get just the word. 
function getDefinitionOrEdit(evt) {
    var fullword = evt.currentTarget;
    var fullID = fullword.id;
    fullID = fullID.split(' ');
    // var id = fullID[0];
    var word = fullID[1];
    // alert(fullID + " " + id + " " + word);
    if (document.getElementById("Scanner").style.display == "block") {
        getDefinition(word);
        // alert(word.name);
    } else if (document.getElementById("Swap Words").style.display == "block") {
        //This resets the editing space which shows the word and its synonyms, so that only one word is being edited at a time. 
        document.getElementById("editor-word").innerHTML = "";
        document.getElementById("radio-button-space").innerHTML = "";
        var words = document.getElementsByClassName("word");
        for (var i = 0; i < words.length; i++){
            words[i].style.backgroundColor = "transparent";
        }
        evt.currentTarget.style.backgroundColor = "yellow";
        editWord(fullword, words, word);  
    }
}

//The definition function and most of the editing functions required adding text to the page - this is a helper 
//function to reduce any repeated code. 
function makeTextNodeHelperFunction(stringOfText, spaceForText) {
    var space = document.getElementById(spaceForText);
    var paragraph = document.createElement("P");
    var textNode = document.createTextNode(stringOfText);

    paragraph.appendChild(textNode);
    space.appendChild(paragraph);
    linebreak = document.createElement("br");
    space.appendChild(linebreak);
}
var editedWord;
//This function sets up the editing space for the selected word: it puts the word and pattern in the 'to-be-edited' space, and 
//creates radio buttons for each synonym and space for the user to enter a word.
function editWord(word, words, wordString) {
    
    // var wordInput = evt.currentTarget.id;
    
    editedWord = word;
    var synonmString = getWordToBeEdited(word);
    makeTheRightNumberOfButtons(word, wordString, synonmString);
}

function getWordToBeEdited(wordToBeEdited) {
    var dropdownTent = wordToBeEdited.getElementsByClassName("dropdown-content");
    var stringRep = "";
    for (var i = 0; i < dropdownTent.length; i++){
        stringRep += dropdownTent[i].innerHTML;
    }

    stringArray = stringRep.split('<br>');
    for (var i = 0; i < 3; i++) {
        makeTextNodeHelperFunction(stringArray[i], "editor-word");
    }
    return stringArray[3];
}

function makeTheRightNumberOfButtons(word, wordString, synonymString) {

    makeCheckButton(wordString, word);
    makeTextNodeHelperFunction("Select or type a word to replace the selected one:", "radio-button-space");
    makeSynonymRadioButtons(synonymString);
    makeCustomRadioButton();
}


function makeCustomRadioButton() {
    makeRadioButton("radio", "Choose your own:");
    textInput = document.createElement("input");
    textInput.setAttribute("type", "text");
    textInput.setAttribute("id", "customInput");
    label = document.createElement("small");
    label.setAttribute("value", "Enter another word to replace the selected one");
    label.appendChild(textInput);
    var space = document.getElementById("radio-button-space");
    space.appendChild(label);
    linebreak = document.createElement("br");
    space.appendChild(linebreak);

}


function makeSynonymRadioButtons(newString) {
    // alert(newString);
    if (newString.match("Synonyms:")) {
        var n = newString.lastIndexOf(":");
        synsString = newString.substring(n+2);
        synsString = synsString.trim();
        // newString = newString.substring(0, n-9); 
        // alert(synsString);   
        synsArray = synsString.split(' ');
        // alert("array: " + synsArray + "\nlength: " + synsArray.length);
        for (var i = 0; i < synsArray.length; i++) {
            if (synsArray[i] != " "){
                makeRadioButton("radio", synsArray[i]);

            }
        }

    }
}


//This simply makes a radion button, giving setting the 'name' value to be the same as the synonym it'll be labelled as. 
function makeRadioButton(type, text) {
    var label = document.createElement("label");
    var element = document.createElement("input");
    text = text.replace('_', ' ');
    element.setAttribute("type", type);
    element.setAttribute("value", text);
    // element.setAttribute("class", "editRadioButtons")
    element.setAttribute("name", "editRadioButtons");
    element.setAttribute("class", "editRadioButtons");

    label.appendChild(element);
    label.innerHTML += " " + text;

    var space = document.getElementById("radio-button-space");
    space.appendChild(label);
    linebreak = document.createElement("br");
    space.appendChild(linebreak);
}

//This makes the check box that users can select if they'd like to highlight all examples of a word, rather than the one they clicked on. 
function makeCheckButton(word, fullWord) {
    var checkButtonLabel = "Highlight all examples of \"" + word + "\"";

    var label = document.createElement("label");
    var element = document.createElement("input");
    element.setAttribute("type", "checkbox");
    element.setAttribute("value", "checkbox");
    element.setAttribute("id", "highlighterCheckbox");
    var highlightAllExamplesText = 'highlightAllExamples(\'' + fullWord.id + '\', \'' + word + '\');';
    element.setAttribute("onclick", highlightAllExamplesText);
    element.onclick = function() {
        highlightAllExamples(fullWord.id, word);
    }
    label.appendChild(element);
    label.innerHTML += " " + checkButtonLabel;
    var space = document.getElementById("radio-button-space");
    space.appendChild(label);
    linebreak = document.createElement("br");
    space.appendChild(linebreak);
    space.appendChild(linebreak);

}

//This is the function associated with the checkbox above - it cylces through all words and highlights if the string matches. 
//At the minute this finds 'inner' matches rather than exact ones. 
function highlightAllExamples(wordID, word) {
    var checkbox = document.getElementById("highlighterCheckbox");
    var words = document.getElementsByClassName("word");
    if (checkbox.checked == true) {
        for (var i = 0; i < words.length; i++) {
            if (words[i].id.match(word)) {
                words[i].style.backgroundColor = "yellow";
            }
        }
    } else {
        for (var i = 0; i < words.length; i++) {
            if (words[i].id != wordID) {
                words[i].style.backgroundColor = "transparent";
            }
        }
    }
}

//Data needed for API calls. 
var APIKey = "kcje7882nvil0mgncl2kio5pudxvpsz3ym5ispkp42ig69yqw";
var baseJSONURL = "https://api.wordnik.com/v4/word.json/";
var relatedWords = "/relatedWords?useCanonical=false&limitPerRelationshipType=10&api_key=kcje7882nvil0mgncl2kio5pudxvpsz3ym5ispkp42ig69yqw";
var randomWordURL = "https://api.wordnik.com/v4/words.json/randomWord?hasDictionaryDef=true&maxCorpusCount=-1&minDictionaryCount=1&maxDictionaryCount=-1&minLength=5&maxLength=-1&api_key=kcje7882nvil0mgncl2kio5pudxvpsz3ym5ispkp42ig69yqw";
var definitionURL = "/definitions?limit=200&includeRelated=false&useCanonical=false&includeTags=false&api_key=";

//Simple API call for a dictionary definition. 
function getDefinition(word) {
    // var wordInput = evt.currentTarget.id;
    var defURL = baseJSONURL + word + definitionURL + APIKey;
    var xhttp = new XMLHttpRequest();
    xhttp.onreadystatechange = function() {
        if(this.readyState == 4 && this.status == 200) {
            var data = JSON.parse(this.responseText);
            var definition = word + ": \n\n" + data[0].text;
            document.getElementById("definition-output").innerHTML = "";

            var lineBreak = document.createElement("br");

            var space = document.getElementById("definition-output");
            space.appendChild(lineBreak);
            makeTextNodeHelperFunction(definition, "definition-output");
        }
    };
    xhttp.open("GET", defURL, true);
    xhttp.send();
}

//Functions for editing text below
//global array holding all the edits a user will create. 
var listOfEdits = [];

//This is the method for creating edits. These edits are each stored in an array with three elements: 0 - A string representation of the word or
//words to be replaced, 1 - Either 'all' indicating each example of the word is to be replaced, or the id tag of the word to be replaced, 2 - A 
// string represenation of the word to replace the selected one. 
//This could be expanded to include replacing or removing by word type, but this is currently seen as a low priority. 
function addEdits() {
    // alert("method went");
    var arrayToGoInListOfEdits = [];
    var word = getWordFromTheEditingSpace();

    arrayToGoInListOfEdits.push(word);

    var oneOrManyVariable = oneWordOrMany();
    if (oneOrManyVariable == "all") {
        arrayToGoInListOfEdits.push("all");
    } else {
        arrayToGoInListOfEdits.push(editedWord.id);
    }
 

    // alert(textForUser);
    //This finds the word that will replace the selected one. 
    var radioButtons = document.getElementsByClassName("editRadioButtons");
    var activeButton;
    for (var j = 0; j < radioButtons.length; j++) {
        if (radioButtons[j].checked) {
            activeButton = radioButtons[j];
            break;
        }
    }
    // alert(activeButton.name);
    if (activeButton.value.match("Choose your own:")) {
        var replacement = document.getElementById("customInput").value
        arrayToGoInListOfEdits.push(document.getElementById("customInput").value);
    } else {
        var replacement = activeButton.value;
        arrayToGoInListOfEdits.push(activeButton.value);
    }

    listOfEdits.push(arrayToGoInListOfEdits);

    textForUser = listOfEdits.length + ": Replace ";
    if (oneOrManyVariable == "all"){
        textForUser += "all instances of \"" + word + "\"";
    } else {
        textForUser += "\"" + word + "\"";
    }
    textForUser += " with \"" + replacement + "\"";
    //Finally, the relevant information is appended to listOfEdits and then that list is printed to the screen for the user to keep track of. 
    makeTextNodeHelperFunction(textForUser, "edit-space");

    document.getElementById("editor-word").innerHTML = "";
    document.getElementById("radio-button-space").innerHTML = "";
    // alert(listOfEdits);
}

function getWordFromTheEditingSpace() {
    var editSpace = document.getElementById("editor-word");
    //It was found to be easier to find the word to be edited from the space rather than being passed as a parameter. 
    var textArray = editSpace.innerHTML;
    // alert(textArray);
    textArray = textArray.split(':');
    var text = textArray[0];
    text = text.slice(3, text.length);
    return text;
}

function oneWordOrMany() {
    var wordsToChange = [];
    var words = document.getElementsByClassName("word");
    //The words will all be the same, but we push all into the array to help the logic of the next section. 
    for (var i = 0; i < words.length; i++) {
        if (words[i].style.backgroundColor == "yellow") {
            wordsToChange.push(words[i]);
        }
    }

//If the words collected number more than one, we know to replace all versions of the word. 
    if (wordsToChange.length > 1) {
        return "all";
    } else {
        return "one";
    }
}


//This makes any changes to the text the user selects, based on the information in listOfEdits.
function scanTextForWordSwaps() {

    var lines = document.getElementsByClassName("line");
    var words = document.getElementsByClassName("word");
    var textArray = [words.length];

    //This makes an array of all words and characters in the text - at the same index as 'words'.
    for (var i = 0; i < words.length; i++) {
        if (words[i].id.length > 1) {
            var tempString = words[i].id.split(' ');
            textArray[i] = tempString[1];
        } else {
            textArray[i] = words[i].innerHTML;
        }
    }
    
    //This makes any swaps needed for the textArray object, based on the corresponding id's from the 'words' list. 
    for (var j = 0; j < listOfEdits.length; j++){
        editsArray = listOfEdits[j];
        //If the edit is to replace all examples of a word, we cycle through and find all matches and swap the corresponding element in textArray. 
        if (editsArray[1] == "all") {
            // alert(editsArray);
            for (var k = 0; k < words.length; k++) {
                if (textArray[k] == editsArray[0]) {
                    // alert("found match");
                    textArray[k] = editsArray[2];
                }
            }
        } else {
            //If we're replacing one word, we go right to the index and make the swap. 
            var index = editsArray[1].split(' ');
            textArray[index[0]] = editsArray[2];
        }
    }

    // This prints the textArray object as a string, including lines breaks.
    var stringRep = "";
    var wordsCounted = 0; 
    for (var l = 0; l < lines.length; l++){
        var numOfWordsForLine = parseInt(lines[l].id, 10);
        for (var j = wordsCounted; j < wordsCounted + numOfWordsForLine; j++) {
            if (words[j].id.length > 1) {
                stringRep += " " + textArray[j];
            } else {
                stringRep += textArray[j] + " ";
            }
        }
        stringRep += "\n";
        wordsCounted += numOfWordsForLine;
    }
    // alert(stringRep);
    // document.getElementById("test-space").style.display = "block";

    //This simply adds the info to an invisible form found in the html of the analyse page, and then clicks its button to 
    //refresh the page. 
    document.getElementById("textInput").value = stringRep;
    document.getElementById("submit-button").click();

}